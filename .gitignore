<<<<<<< HEAD
# Python cache files
__pycache__/
*.py[cod]

# Секретные ключи и конфиденциальные файлы
.env
.env.*

# База данных (если используется SQLite)
db.sqlite3

# Миграции
*/migrations/*
!*/migrations/__init__.py

# Статические и медиа файлы
/static/
/media/

# IDE файлы
.idea/
.vscode/

# Логи
*.log

# Временные файлы
*.pot
*.pyc
*.pyo

# Docker файлы
.docker/
docker-compose.override.yml

# Виртуальные окружения
venv/
.venv/
=======
# === GLOBAL ===
.DS_Store
.idea/
.vscode/
*.log
*.pyc
__pycache__/
local_settings.py
db.sqlite3
db.sqlite3-journal
media

backend/venv/
backend/db.sqlite3

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
*.py[cod]
*$py.class

frontend/.dart_tool/
frontend/.flutter-plugins
frontend/.flutter-plugins-dependencies
frontend/.packages
frontend/build/
frontend/pubspec.lock
frontend/ios/Flutter/Flutter.framework
frontend/ios/Flutter/Flutter.podspec
frontend/ios/.symlinks
frontend/ios/Pods/
frontend/ios/Runner.xcworkspace/
frontend/ios/DerivedData/
frontend/ios/.dart_tool/
frontend/.idea/
frontend/coverage/
frontend/android/.gradle/
frontend/android/app/debug/
frontend/android/app/profile/
frontend/android/app/release/
frontend/web/.dart_tool/
frontend/linux/
frontend/macos/
frontend/windows/

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.jks
*.keystore
*.p12
*.pem
*.key
# Django stuff:

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version
.dart_tool/
build/
*.dill
*.apk
.flutter-plugins
.flutter-plugins-dependencies
.packages
# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/



# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# End of https://www.toptal.com/developers/gitignore/api/django
>>>>>>> 567a52841813efa65f4b01b5f4eb0d6c68afdf35
